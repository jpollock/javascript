{"version":3,"sources":["core/endpoints/uuid_metadata/message_counts.js"],"names":["getOperation","validateParams","getURL","getRequestTimeout","isAuthSupported","prepareParams","handleResponse","operationConstants","PNUuidMetadataCreate","modules","incomingParams","channels","channelTimeTokens","config","length","subscribeKey","getTransactionTimeout","name","description","params","serverResponse"],"mappings":";;;;;QAOgBA,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QASAC,M,GAAAA,M;QAMAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAQAC,c,GAAAA,c;;AAxChB;;AACA;;;;AACA;;;;;;AAGO,SAASN,YAAT,GAAgC;AACrC,SAAOO,qBAAmBC,oBAA1B;AACD;;AAEM,SAASP,cAAT,CAAwBQ,OAAxB,EAAgDC,cAAhD,EAA0F;AAAA,MACzFC,QADyF,GACzDD,cADyD,CACzFC,QADyF;AAAA,MAC/EC,iBAD+E,GACzDF,cADyD,CAC/EE,iBAD+E;AAAA,MAEzFC,MAFyF,GAE9EJ,OAF8E,CAEzFI,MAFyF;;;AAI/F,MAAI,CAACD,iBAAL,EAAwB,OAAO,2BAAP;AACxB,MAAI,CAACD,QAAD,IAAaA,SAASG,MAAT,KAAoB,CAArC,EAAwC,OAAO,kBAAP;AACxC,MAAI,CAACD,OAAOE,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASb,MAAT,CAAgBO,OAAhB,EAAwCC,cAAxC,EAA0F;AAAA,MACzFC,QADyF,GACzDD,cADyD,CACzFC,QADyF;AAAA,MAC/EC,iBAD+E,GACzDF,cADyD,CAC/EE,iBAD+E;AAAA,MAEzFC,MAFyF,GAE9EJ,OAF8E,CAEzFI,MAFyF;;AAG/F,kCAA8BA,OAAOE,YAArC,wBAAoEJ,QAApE,2BAAkGC,iBAAlG;AACD;;AAEM,SAAST,iBAAT,OAA8D;AAAA,MAAjCU,MAAiC,QAAjCA,MAAiC;;AACnE,SAAOA,OAAOG,qBAAP,EAAP;AACD;;AAEM,SAASZ,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBI,OAAvB,EAA+CC,cAA/C,EAAiG;AAAA,MAChGO,IADgG,GAC3EP,cAD2E,CAChGO,IADgG;AAAA,MAC1FC,WAD0F,GAC3ER,cAD2E,CAC1FQ,WAD0F;;AAEtG,MAAMC,SAAS,EAAf;;AAIA,SAAOA,MAAP;AACD;AACM,SAASb,cAAT,CAAwBG,OAAxB,EAAgDW,cAAhD,EAAgF;AACrF,SAAOA,cAAP;AACD","file":"message_counts.js","sourcesContent":["/* @flow */\n\nimport { AddChannelParams, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\n\nexport function getOperation(): string {\n  return operationConstants.PNUuidMetadataCreate;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: CreateUuidMetadataParams) {\n  let { channels, channelTimeTokens } = incomingParams;\n  let { config } = modules;\n\n  if (!channelTimeTokens) return 'Missing ChannelTimeTokens';\n  if (!channels || channels.length === 0) return 'Missing Channels';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): string {\n  let { channels, channelTimeTokens } = incomingParams;\n  let { config } = modules;\n  return `/v3/history/sub-key/${config.subscribeKey}/message-counts/${channels}?channelsTimetoken=${channelTimeTokens}`\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): Object {\n  let { name, description} = incomingParams;\n  const params = {};\n\n  //params.state = JSON.stringify(state);\n\n  return params;\n}\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): Object {\n  return serverResponse;\n}\n"]}