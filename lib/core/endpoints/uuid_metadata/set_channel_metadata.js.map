{"version":3,"sources":["core/endpoints/uuid_metadata/set_channel_metadata.js"],"names":["usePut","getOperation","validateParams","putURL","getRequestTimeout","isAuthSupported","prepareParams","postPayload","handleResponse","PNUuidMetadataCreate","modules","incomingParams","channel","config","subscribeKey","getTransactionTimeout","name","description","params","prepareMessagePayload","messagePayload","crypto","stringifiedPayload","JSON","stringify","cipherKey","encrypt","serverResponse"],"mappings":";;;;;QAMgBA,M,GAAAA,M;QAIAC,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAQAC,M,GAAAA,M;QAOAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAqBAC,W,GAAAA,W;QAKAC,c,GAAAA,c;;AA7DhB;;AACA;;;;AACA;;;;;;AAEO,SAASR,MAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,YAAT,GAAgC;AACrC,SAAO,qBAAmBQ,oBAA1B;AACD;;AAEM,SAASP,cAAT,CAAwBQ,OAAxB,EAAgDC,cAAhD,EAA0F;AAAA,MACzFC,OADyF,GAC7ED,cAD6E,CACzFC,OADyF;AAAA,MAEzFC,MAFyF,GAE9EH,OAF8E,CAEzFG,MAFyF;;;AAI/F,MAAI,CAACD,OAAL,EAAc,OAAO,iBAAP;AACd,MAAI,CAACC,OAAOC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASX,MAAT,CAAgBO,OAAhB,EAAwCC,cAAxC,EAA0F;AAAA,MACzFC,OADyF,GAC7ED,cAD6E,CACzFC,OADyF;AAAA,MAEzFC,MAFyF,GAE9EH,OAF8E,CAEzFG,MAFyF;;;AAI/F,+BAA2BA,OAAOC,YAAlC,kBAA2DF,OAA3D;AACD;;AAEM,SAASR,iBAAT,OAA8D;AAAA,MAAjCS,MAAiC,QAAjCA,MAAiC;;AACnE,SAAOA,OAAOE,qBAAP,EAAP;AACD;;AAEM,SAASV,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBI,OAAvB,EAA+CC,cAA/C,EAAiG;AAAA,MAChGK,IADgG,GAC3EL,cAD2E,CAChGK,IADgG;AAAA,MAC1FC,WAD0F,GAC3EN,cAD2E,CAC1FM,WAD0F;;AAEtG,MAAMC,SAAS,EAAf;;AAIA,SAAOA,MAAP;AACD;;AAED,SAASC,qBAAT,CAA+BT,OAA/B,EAAwCU,cAAxC,EAAwD;AAAA,MAC9CC,MAD8C,GAC3BX,OAD2B,CAC9CW,MAD8C;AAAA,MACtCR,MADsC,GAC3BH,OAD2B,CACtCG,MADsC;;AAEtD,MAAIS,qBAAqBC,KAAKC,SAAL,CAAeJ,cAAf,CAAzB;;AAEA,MAAIP,OAAOY,SAAX,EAAsB;AACpBH,yBAAqBD,OAAOK,OAAP,CAAeJ,kBAAf,CAArB;AACAA,yBAAqBC,KAAKC,SAAL,CAAeF,kBAAf,CAArB;AACD;;AAED,SAAOA,kBAAP;AACD;;AAEM,SAASf,WAAT,CAAqBG,OAArB,EAA6CC,cAA7C,EAA+F;AACpG,SAAOQ,sBAAsBT,OAAtB,EAA+BC,cAA/B,CAAP;AACD;;AAGM,SAASH,cAAT,CAAwBE,OAAxB,EAAgDiB,cAAhD,EAAgF;AACrF,SAAOA,cAAP;AACD","file":"set_channel_metadata.js","sourcesContent":["/* @flow */\n\nimport { AddChannelParams, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function usePut(): boolean {\n  return true;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNUuidMetadataCreate;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: CreateUuidMetadataParams) {\n  let { channel } = incomingParams;\n  let { config } = modules;\n\n  if (!channel) return 'Missing Channel';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function putURL(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): string {\n  let { channel } = incomingParams;\n  let { config } = modules;\n\n  return `/v1/data/sub-key/${config.subscribeKey}/channels/${channel}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): Object {\n  let { name, description} = incomingParams;\n  const params = {};\n\n  //params.state = JSON.stringify(state);\n\n  return params;\n}\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  const { crypto, config } = modules;\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n}\n\nexport function postPayload(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): string {\n  return prepareMessagePayload(modules, incomingParams);\n}\n\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): Object {\n  return serverResponse;\n}\n\n"]}