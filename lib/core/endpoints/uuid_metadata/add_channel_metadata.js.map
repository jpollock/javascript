{"version":3,"sources":["core/endpoints/uuid_metadata/add_channel_metadata.js"],"names":["usePost","getOperation","validateParams","postURL","getRequestTimeout","isAuthSupported","prepareParams","postPayload","handleResponse","operationConstants","PNUuidMetadataCreate","modules","incomingParams","config","subscribeKey","getTransactionTimeout","name","description","params","prepareMessagePayload","messagePayload","crypto","stringifiedPayload","JSON","stringify","cipherKey","encrypt","serverResponse"],"mappings":";;;;;QAMgBA,O,GAAAA,O;QAIAC,Y,GAAAA,Y;QAIAC,c,GAAAA,c;QAMAC,O,GAAAA,O;QAMAC,iB,GAAAA,iB;QAIAC,e,GAAAA,e;QAIAC,a,GAAAA,a;QAqBAC,W,GAAAA,W;QAKAC,c,GAAAA,c;;AA1DhB;;AACA;;;;AACA;;;;;;AAEO,SAASR,OAAT,GAA4B;AACjC,SAAO,IAAP;AACD;;AAEM,SAASC,YAAT,GAAgC;AACrC,SAAOQ,qBAAmBC,oBAA1B;AACD;;AAEM,SAASR,cAAT,CAAwBS,OAAxB,EAAgDC,cAAhD,EAA0F;AAAA,MACzFC,MADyF,GAC9EF,OAD8E,CACzFE,MADyF;;;AAG/F,MAAI,CAACA,OAAOC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASX,OAAT,CAAiBQ,OAAjB,EAAyCC,cAAzC,EAA2F;AAAA,MAC1FC,MAD0F,GAC/EF,OAD+E,CAC1FE,MAD0F;;;AAGhG,0BAAsBA,OAAOC,YAA7B;AACD;;AAEM,SAASV,iBAAT,OAA8D;AAAA,MAAjCS,MAAiC,QAAjCA,MAAiC;;AACnE,SAAOA,OAAOE,qBAAP,EAAP;AACD;;AAEM,SAASV,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBK,OAAvB,EAA+CC,cAA/C,EAAiG;AAAA,MAChGI,IADgG,GAC3EJ,cAD2E,CAChGI,IADgG;AAAA,MAC1FC,WAD0F,GAC3EL,cAD2E,CAC1FK,WAD0F;;AAEtG,MAAMC,SAAS,EAAf;;AAIA,SAAOA,MAAP;AACD;;AAED,SAASC,qBAAT,CAA+BR,OAA/B,EAAwCS,cAAxC,EAAwD;AAAA,MAC9CC,MAD8C,GAC3BV,OAD2B,CAC9CU,MAD8C;AAAA,MACtCR,MADsC,GAC3BF,OAD2B,CACtCE,MADsC;;AAEtD,MAAIS,qBAAqBC,KAAKC,SAAL,CAAeJ,cAAf,CAAzB;;AAEA,MAAIP,OAAOY,SAAX,EAAsB;AACpBH,yBAAqBD,OAAOK,OAAP,CAAeJ,kBAAf,CAArB;AACAA,yBAAqBC,KAAKC,SAAL,CAAeF,kBAAf,CAArB;AACD;;AAED,SAAOA,kBAAP;AACD;;AAEM,SAASf,WAAT,CAAqBI,OAArB,EAA6CC,cAA7C,EAA+F;AACpG,SAAOO,sBAAsBR,OAAtB,EAA+BC,cAA/B,CAAP;AACD;;AAGM,SAASJ,cAAT,CAAwBG,OAAxB,EAAgDgB,cAAhD,EAAgF;AACrF,SAAOA,cAAP;AACD","file":"add_channel_metadata.js","sourcesContent":["/* @flow */\n\nimport { AddChannelParams, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function usePost(): boolean {\n  return true;\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNUuidMetadataCreate;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: CreateUuidMetadataParams) {\n  let { config } = modules;\n\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function postURL(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): string {\n  let { config } = modules;\n\n  return `/v1/objects/${config.subscribeKey}/spaces`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): number {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): Object {\n  let { name, description} = incomingParams;\n  const params = {};\n\n  //params.state = JSON.stringify(state);\n\n  return params;\n}\n\nfunction prepareMessagePayload(modules, messagePayload) {\n  const { crypto, config } = modules;\n  let stringifiedPayload = JSON.stringify(messagePayload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n}\n\nexport function postPayload(modules: ModulesInject, incomingParams: CreateUuidMetadataParams): string {\n  return prepareMessagePayload(modules, incomingParams);\n}\n\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Object): Object {\n  return serverResponse;\n}\n\n"]}